
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module sound_sample(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

reg [15:0] d_new;
reg [15:0] d_old;
reg [15:0] freq;
reg [15:0] freq_x;

wire ctrl;
wire shift;
wire up;
wire caps;

wire clk_i2c;
wire reset;
wire [15:0] audiodata;

wire [7:0] ascii;


//=======================================================
//  Structural coding
//=======================================================

assign reset = ~KEY[0];

audio_clk u1(CLOCK_50, reset,AUD_XCK, LEDR[9]);

MyKeyboard(			.clk(CLOCK2_50),
						.clrn(1'b1),
						.ps2_clk(PS2_CLK),
						.ps2_data(PS2_DAT),
						//output reg [7:0] data,
						.ascii(ascii),
						.d_digit_low(HEX0),
						.d_digit_high(HEX1),
						.a_digit_low(HEX2),
						.a_digit_high(HEX3),
						.c_digit_low(HEX4),
						.c_digit_high(HEX5),
						//output reg[15:0] count,
						.ctrl(ctrl),
						.shift(shift),
						.up(up),
						.caps(caps)
						);

//I2C part
clkgen #(10000) my_i2c_clk(CLOCK_50,reset,1'b1,clk_i2c);  //10k I2C clock  


I2C_Audio_Config myconfig(clk_i2c, KEY[0],SW[1:0],FPGA_I2C_SCLK,FPGA_I2C_SDAT,LEDR[2:0]);

I2S_Audio myaudio(AUD_XCK, KEY[0], AUD_BCLK, AUD_DACDAT, AUD_DACLRCK, audiodata);

Sin_Generator sin_wave(AUD_DACLRCK, KEY[0], freq,freq_x,caps, audiodata);//

always @ (posedge CLOCK_50) begin
	case(ascii[7:0])
	8'h31:begin d_new <= 523.25; if(!ctrl) d_old <= 523.25; end
	8'h32:begin d_new <= 587.23; if(!ctrl) d_old <= 587.23; end
	8'h33:begin d_new <= 659.26; if(!ctrl) d_old <= 659.26; end
	8'h34:begin d_new <= 698.46; if(!ctrl) d_old <= 698.46; end
	8'h35:begin d_new <= 783.99; if(!ctrl) d_old <= 783.99; end
	8'h36:begin d_new <= 880; 	  if(!ctrl) d_old <= 880;    end
	8'h37:begin d_new <= 987.77; if(!ctrl) d_old <= 987.77; end
	8'h38:begin d_new <= 1046.5; if(!ctrl) d_old <= 1046.5; end
	default:begin d_new <=0; end
	endcase
end

always @ (CLOCK_50)
begin
	freq = d_new*65536/48000;
	if (d_new==0) 
		freq_x = 0;
	else
		freq_x = d_old*65536/48000;
end


endmodule
